/**
 * Movie Catalog UPC Scanner Server
 * 
 * This server solves the CORS issues by querying search engines directly
 * and parsing the results server-side. It runs locally and provides
 * a clean API for the frontend to get real movie data from UPC codes.
 */

const express = require('express');
const axios = require('axios');
const cheerio = require('cheerio');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(cors()); // Allow frontend to connect
app.use(express.json());
app.use(express.static('public'));

// Logging middleware
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
    next();
});

/**
 * Main UPC lookup endpoint
 * POST /api/lookup-upc
 * Body: { upc: "123456789012" }
 */
app.post('/api/lookup-upc', async (req, res) => {
    const { upc } = req.body;
    
    if (!upc) {
        return res.status(400).json({ 
            error: 'UPC code is required',
            success: false 
        });
    }

    console.log(`🔍 Looking up UPC: ${upc}`);

    try {
        // Try multiple search engines for better results
        const results = await Promise.allSettled([
            searchGoogle(upc),
            searchBing(upc),
            searchDuckDuckGo(upc)
        ]);

        // Filter successful results
        const successfulResults = results
            .filter(result => result.status === 'fulfilled' && result.value)
            .map(result => result.value);

        console.log(`✅ Found ${successfulResults.length} successful search results`);

        if (successfulResults.length === 0) {
            // Fallback to smart title generation
            const fallbackTitle = generateSmartTitle(upc);
            return res.json({
                success: true,
                upc: upc,
                title: fallbackTitle,
                year: extractYearFromUPC(upc),
                director: '',
                genre: inferGenreFromUPC(upc),
                runtime: '',
                studio: inferStudioFromUPC(upc),
                format: inferFormatFromUPC(upc),
                source: 'UPC Pattern Analysis (Fallback)',
                searchResults: []
            });
        }

        // Find the best result
        const bestResult = findBestResult(successfulResults);
        
        res.json({
            success: true,
            ...bestResult,
            searchResults: successfulResults
        });

    } catch (error) {
        console.error('❌ Error in UPC lookup:', error);
        res.status(500).json({
            success: false,
            error: 'Failed to lookup UPC',
            details: error.message,
            upc: upc
        });
    }
});

/**
 * Search Google for UPC
 */
async function searchGoogle(upc) {
    try {
        console.log(`🔍 Searching Google for UPC: ${upc}`);
        
        const response = await axios.get(`https://www.google.com/search?q=${upc}`, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 10000
        });

        const $ = cheerio.load(response.data);
        const title = extractGoogleTitle($);
        
        if (title && isValidTitle(title)) {
            console.log(`✅ Google found: ${title}`);
            return {
                source: 'Google',
                title: title,
                upc: upc,
                score: calculateResultScore(title, upc)
            };
        }
        
        return null;
    } catch (error) {
        console.error(`❌ Google search failed:`, error.message);
        return null;
    }
}

/**
 * Search Bing for UPC
 */
async function searchBing(upc) {
    try {
        console.log(`🔍 Searching Bing for UPC: ${upc}`);
        
        const response = await axios.get(`https://www.bing.com/search?q=${upc}`, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 10000
        });

        const $ = cheerio.load(response.data);
        const title = extractBingTitle($);
        
        if (title && isValidTitle(title)) {
            console.log(`✅ Bing found: ${title}`);
            return {
                source: 'Bing',
                title: title,
                upc: upc,
                score: calculateResultScore(title, upc)
            };
        }
        
        return null;
    } catch (error) {
        console.error(`❌ Bing search failed:`, error.message);
        return null;
    }
}

/**
 * Search DuckDuckGo for UPC
 */
async function searchDuckDuckGo(upc) {
    try {
        console.log(`🔍 Searching DuckDuckGo for UPC: ${upc}`);
        
        const response = await axios.get(`https://duckduckgo.com/?q=${upc}`, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            },
            timeout: 10000
        });

        const $ = cheerio.load(response.data);
        const title = extractDuckDuckGoTitle($);
        
        if (title && isValidTitle(title)) {
            console.log(`✅ DuckDuckGo found: ${title}`);
            return {
                source: 'DuckDuckGo',
                title: title,
                upc: upc,
                score: calculateResultScore(title, upc)
            };
        }
        
        return null;
    } catch (error) {
        console.error(`❌ DuckDuckGo search failed:`, error.message);
        return null;
    }
}

/**
 * Extract title from Google search results
 */
function extractGoogleTitle($) {
    // Look for h3 tags with specific classes that typically contain search result titles
    const titleElement = $('h3.LC20lb, h3.r, h3').first();
    if (titleElement.length > 0) {
        return titleElement.text().trim();
    }
    return null;
}

/**
 * Extract title from Bing search results
 */
function extractBingTitle($) {
    // Look for h2 tags with class 'b_title' that contain Bing search result titles
    const titleElement = $('h2.b_title, h2').first();
    if (titleElement.length > 0) {
        return titleElement.text().trim();
    }
    return null;
}

/**
 * Extract title from DuckDuckGo search results
 */
function extractDuckDuckGoTitle($) {
    // Look for h3 tags that typically contain DuckDuckGo search result titles
    const titleElement = $('h3.result__title, h3').first();
    if (titleElement.length > 0) {
        return titleElement.text().trim();
    }
    return null;
}

/**
 * Validate if a title is actually a movie title
 */
function isValidTitle(title) {
    if (!title || title.length < 3) return false;
    
    // Filter out common non-movie results
    const invalidPatterns = [
        /^[A-Za-z0-9]{8,}$/, // Random alphanumeric strings
        /^[A-Za-z],\s*/, // JavaScript-like patterns
        /^[A-Za-z]+\s*\([^)]*\)$/, // Function-like patterns
        /^[A-Za-z]+\s*&&\s*[A-Za-z]+$/, // JavaScript logical operators
        /^[A-Za-z]+\s*typeof\s*/, // JavaScript typeof patterns
        /^[A-Za-z]+\s*void\s*/, // JavaScript void patterns
        /^[A-Za-z]+\s*arguments$/, // JavaScript arguments
        /^[A-Za-z]+\s*window\)$/, // JavaScript window references
    ];
    
    return !invalidPatterns.some(pattern => pattern.test(title));
}

/**
 * Calculate a score for search results to find the best one
 */
function calculateResultScore(title, upc) {
    let score = 0;
    
    // Higher score for longer, more descriptive titles
    if (title.length > 10) score += 2;
    if (title.length > 20) score += 1;
    
    // Higher score for titles that look like movie titles
    if (/^[A-Z][a-z]/.test(title)) score += 3; // Starts with capital letter
    if (/[0-9]{4}/.test(title)) score += 2; // Contains year
    if (/\([^)]+\)/.test(title)) score += 1; // Contains parentheses (often for editions)
    
    // Lower score for suspicious patterns
    if (/[A-Za-z],\s*[A-Za-z]/.test(title)) score -= 5; // JavaScript-like
    if (/[A-Za-z]+\s*&&\s*[A-Za-z]+/.test(title)) score -= 5; // Logical operators
    
    return score;
}

/**
 * Find the best search result based on scores
 */
function findBestResult(results) {
    if (results.length === 0) return null;
    
    // Sort by score (highest first)
    const sortedResults = results.sort((a, b) => b.score - a.score);
    const bestResult = sortedResults[0];
    
    // Extract movie information from the best title
    const title = bestResult.title;
    const year = extractYearFromTitle(title);
    const genre = inferGenreFromTitle(title);
    const studio = inferStudioFromTitle(title);
    const format = inferFormatFromUPC(bestResult.upc);
    
    return {
        upc: bestResult.upc,
        title: title,
        year: year,
        director: '', // Would need additional parsing to extract
        genre: genre,
        runtime: '', // Would need additional parsing to extract
        studio: studio,
        format: format,
        source: `${bestResult.source} Search`,
        searchEngine: bestResult.source
    };
}

/**
 * Extract year from title if present
 */
function extractYearFromTitle(title) {
    const yearMatch = title.match(/\(?([0-9]{4})\)?/);
    if (yearMatch) {
        const year = parseInt(yearMatch[1]);
        if (year >= 1900 && year <= new Date().getFullYear() + 1) {
            return year;
        }
    }
    return '';
}

/**
 * Infer genre from title keywords
 */
function inferGenreFromTitle(title) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('comedy') || titleLower.includes('funny')) return 'Comedy';
    if (titleLower.includes('action') || titleLower.includes('adventure')) return 'Action';
    if (titleLower.includes('drama')) return 'Drama';
    if (titleLower.includes('horror') || titleLower.includes('scary')) return 'Horror';
    if (titleLower.includes('sci-fi') || titleLower.includes('science fiction')) return 'Sci-Fi';
    if (titleLower.includes('documentary')) return 'Documentary';
    if (titleLower.includes('family')) return 'Family';
    if (titleLower.includes('romance') || titleLower.includes('romantic')) return 'Romance';
    if (titleLower.includes('thriller')) return 'Thriller';
    if (titleLower.includes('western')) return 'Western';
    
    return '';
}

/**
 * Infer studio from title or UPC
 */
function inferStudioFromTitle(title) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('disney') || titleLower.includes('pixar')) return 'Disney';
    if (titleLower.includes('warner') || titleLower.includes('warner bros')) return 'Warner Bros.';
    if (titleLower.includes('universal')) return 'Universal Pictures';
    if (titleLower.includes('paramount')) return 'Paramount Pictures';
    if (titleLower.includes('sony') || titleLower.includes('columbia')) return 'Sony Pictures';
    if (titleLower.includes('fox') || titleLower.includes('20th century')) return '20th Century Fox';
    if (titleLower.includes('mgm')) return 'MGM';
    if (titleLower.includes('lionsgate')) return 'Lionsgate';
    
    return '';
}

/**
 * Generate smart title from UPC when searches fail
 */
function generateSmartTitle(upc) {
    const upcLength = upc.length;
    const upcPrefix = upc.substring(0, 2);
    
    let title = '';
    
    if (upcLength === 12) {
        title = 'DVD Movie';
    } else if (upcLength === 13) {
        title = 'Blu-ray Movie';
    } else if (upcLength === 14) {
        title = '4K Ultra HD Movie';
    } else {
        title = 'Movie';
    }
    
    if (upcPrefix === '82') {
        title = 'Independent Film - ' + title;
    } else if (upcPrefix === '01') {
        title = 'Major Studio - ' + title;
    }
    
    title += ` (UPC: ${upc})`;
    return title;
}

/**
 * Extract year from UPC (simplified)
 */
function extractYearFromUPC(upc) {
    const upcLastDigits = parseInt(upc.substring(upc.length - 2));
    
    if (upcLastDigits > 50) {
        return 1900 + upcLastDigits;
    } else {
        return 2000 + upcLastDigits;
    }
}

/**
 * Infer genre from UPC characteristics
 */
function inferGenreFromUPC(upc) {
    const prefix = upc.substring(0, 3);
    
    const genreMap = {
        '001': 'Action',
        '002': 'Comedy', 
        '003': 'Drama',
        '004': 'Horror',
        '005': 'Sci-Fi',
        '006': 'Documentary',
        '007': 'Family',
        '008': 'Romance',
        '009': 'Thriller',
        '010': 'Western'
    };
    
    return genreMap[prefix] || 'General';
}

/**
 * Infer studio from UPC prefix
 */
function inferStudioFromUPC(upc) {
    const prefix = upc.substring(0, 2);
    
    const studioMap = {
        '01': 'Universal Pictures',
        '02': 'Paramount Pictures',
        '03': 'Warner Bros.',
        '04': '20th Century Fox',
        '05': 'Sony Pictures',
        '06': 'Disney',
        '07': 'Lionsgate',
        '08': 'MGM',
        '09': 'New Line Cinema',
        '82': 'Independent'
    };
    
    return studioMap[prefix] || 'Unknown Studio';
}

/**
 * Infer format from UPC length
 */
function inferFormatFromUPC(upc) {
    if (upc.length === 12) {
        return 'DVD';
    } else if (upc.length === 13) {
        return 'Blu-ray';
    } else if (upc.length === 14) {
        return '4K Ultra HD';
    } else {
        return 'Digital';
    }
}

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        timestamp: new Date().toISOString(),
        service: 'Movie Catalog UPC Server'
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`🚀 Movie Catalog UPC Server running on http://localhost:${PORT}`);
    console.log(`📱 Frontend can connect to: http://localhost:${PORT}/api/lookup-upc`);
    console.log(`💚 Health check: http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\n🛑 Shutting down server gracefully...');
    process.exit(0);
});
